require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

# RSpec.describe OccasionsController, :type => :controller do
#
#   # This should return the minimal set of attributes required to create a valid
#   # Occasion. As you add validations to Occasion, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip('Add a hash of attributes valid for your model')
#   }
#
#   let(:invalid_attributes) {
#     skip('Add a hash of attributes invalid for your model')
#   }
#
#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # OccasionsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }
#
#   describe 'GET index' do
#     it 'assigns all occasions as @occasions' do
#       occasion = Occasion.create! valid_attributes
#       get :index, {}, valid_session
#       expect(assigns(:occasions)).to eq([occasion])
#     end
#   end
#
#   describe 'GET show' do
#     it 'assigns the requested occasion as @occasion' do
#       occasion = Occasion.create! valid_attributes
#       get :show, {:id => occasion.to_param}, valid_session
#       expect(assigns(:occasion)).to eq(occasion)
#     end
#   end
#
#   describe 'GET new' do
#     it 'assigns a new occasion as @occasion' do
#       get :new, {}, valid_session
#       expect(assigns(:occasion)).to be_a_new(Occasion)
#     end
#   end
#
#   describe 'GET edit' do
#     it 'assigns the requested occasion as @occasion' do
#       occasion = Occasion.create! valid_attributes
#       get :edit, {:id => occasion.to_param}, valid_session
#       expect(assigns(:occasion)).to eq(occasion)
#     end
#   end
#
#   describe 'POST create' do
#     describe 'with valid params' do
#       it 'creates a new Occasion' do
#         expect {
#           post :create, {:occasion => valid_attributes}, valid_session
#         }.to change(Occasion, :count).by(1)
#       end
#
#       it 'assigns a newly created occasion as @occasion' do
#         post :create, {:occasion => valid_attributes}, valid_session
#         expect(assigns(:occasion)).to be_a(Occasion)
#         expect(assigns(:occasion)).to be_persisted
#       end
#
#       it 'redirects to the created occasion' do
#         post :create, {:occasion => valid_attributes}, valid_session
#         expect(response).to redirect_to(Occasion.last)
#       end
#     end
#
#     describe 'with invalid params' do
#       it 'assigns a newly created but unsaved occasion as @occasion' do
#         post :create, {:occasion => invalid_attributes}, valid_session
#         expect(assigns(:occasion)).to be_a_new(Occasion)
#       end
#
#       it 're-renders the 'new' template' do
#         post :create, {:occasion => invalid_attributes}, valid_session
#         expect(response).to render_template('new')
#       end
#     end
#   end
#
#   describe 'PUT update' do
#     describe 'with valid params' do
#       let(:new_attributes) {
#         skip('Add a hash of attributes valid for your model')
#       }
#
#       it 'updates the requested occasion' do
#         occasion = Occasion.create! valid_attributes
#         put :update, {:id => occasion.to_param, :occasion => new_attributes}, valid_session
#         occasion.reload
#         skip('Add assertions for updated state')
#       end
#
#       it 'assigns the requested occasion as @occasion' do
#         occasion = Occasion.create! valid_attributes
#         put :update, {:id => occasion.to_param, :occasion => valid_attributes}, valid_session
#         expect(assigns(:occasion)).to eq(occasion)
#       end
#
#       it 'redirects to the occasion' do
#         occasion = Occasion.create! valid_attributes
#         put :update, {:id => occasion.to_param, :occasion => valid_attributes}, valid_session
#         expect(response).to redirect_to(occasion)
#       end
#     end
#
#     describe 'with invalid params' do
#       it 'assigns the occasion as @occasion' do
#         occasion = Occasion.create! valid_attributes
#         put :update, {:id => occasion.to_param, :occasion => invalid_attributes}, valid_session
#         expect(assigns(:occasion)).to eq(occasion)
#       end
#
#       it 're-renders the 'edit' template' do
#         occasion = Occasion.create! valid_attributes
#         put :update, {:id => occasion.to_param, :occasion => invalid_attributes}, valid_session
#         expect(response).to render_template('edit')
#       end
#     end
#   end
#
#   describe 'DELETE destroy' do
#     it 'destroys the requested occasion' do
#       occasion = Occasion.create! valid_attributes
#       expect {
#         delete :destroy, {:id => occasion.to_param}, valid_session
#       }.to change(Occasion, :count).by(-1)
#     end
#
#     it 'redirects to the occasions list' do
#       occasion = Occasion.create! valid_attributes
#       delete :destroy, {:id => occasion.to_param}, valid_session
#       expect(response).to redirect_to(occasions_url)
#     end
#   end
#
# end
